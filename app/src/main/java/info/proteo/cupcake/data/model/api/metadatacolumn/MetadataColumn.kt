package info.proteo.cupcake.data.model.api.metadatacolumn

import com.squareup.moshi.Json

data class MetadataColumn(
    val id: Int,
    val name: String,
    val type: String?,
    @Json(name = "column_position") val columnPosition: Int?,
    val value: String?,
    @Json(name = "stored_reagent") val storedReagent: Int?,
    @Json(name = "created_at") val createdAt: String?,
    @Json(name = "updated_at") val updatedAt: String?,
    @Json(name = "not_applicable") val notApplicable: Boolean,
    val mandatory: Boolean,
    val modifiers: List<String>?,
    val readonly: Boolean,
    val hidden: Boolean,
    @Json(name = "auto_generated") val autoGenerated: Boolean
)

data class SubcellularLocation(
    @Json(name = "location_identifier") val locationIdentifier: String?,
    @Json(name = "topology_identifier") val topologyIdentifier: String?,
    @Json(name = "orientation_identifier") val orientationIdentifier: String?,
    val accession: String?,
    val definition: String?,
    val synonyms: String?,
    val content: String?,
    @Json(name = "is_a") val isA: String?,
    @Json(name = "part_of") val partOf: String?,
    val keyword: String?,
    @Json(name = "gene_ontology") val geneOntology: String?,
    val annotation: String?,
    val references: String?,
    val links: String?
)

data class Tissue(
    val identifier: String?,
    val accession: String?,
    val synonyms: String?,
    @Json(name = "cross_references") val crossReferences: String?
)

data class HumanDisease(
    val identifier: String?,
    val acronym: String?,
    val accession: String?,
    val synonyms: String?,
    @Json(name = "cross_references") val crossReferences: String?,
    val definition: String?,
    val keywords: String?
)

data class MSUniqueVocabularies(
    val accession: String?,
    val name: String?,
    val definition: String?,
    @Json(name = "term_type") val termType: String?
)

data class Species(
    val id: Int,
    val code: String?,
    val taxon: String?,
    @Json(name = "common_name") val commonName: String?,
    @Json(name = "official_name") val officialName: String?,
    val synonym: String?
)

data class Unimod(
    val accession: String?,
    val name: String?,
    val definition: String?,
    @Json(name = "additional_data") val additionalData: String?
)

data class FavouriteMetadataOption(
    val id: Int,
    val user: Int,
    val name: String?,
    val type: String?,
    val value: String?,
    @Json(name = "display_value") val displayValue: String?,
    @Json(name = "service_lab_group") val serviceLabGroup: Int?,
    @Json(name = "lab_group") val labGroup: Int?,
    val preset: Int?,
    @Json(name = "created_at") val createdAt: String?,
    @Json(name = "updated_at") val updatedAt: String?,
    @Json(name = "is_global") val isGlobal: Boolean
)

data class Preset(
    val id: Int,
    val name: String?,
    val user: Int?,
    @Json(name = "created_at") val createdAt: String?,
    @Json(name = "updated_at") val updatedAt: String?
)

data class MetadataTableTemplate(
    val id: Int,
    val name: String?,
    val user: Int?,
    @Json(name = "created_at") val createdAt: String?,
    @Json(name = "updated_at") val updatedAt: String?,
    @Json(name = "user_columns") val userColumns: List<MetadataColumn>?,
    @Json(name = "hidden_user_columns") val hiddenUserColumns: Int?,
    @Json(name = "staff_columns") val staffColumns: List<MetadataColumn>?,
    @Json(name = "hidden_staff_columns") val hiddenStaffColumns: Int?,
    @Json(name = "service_lab_group") val serviceLabGroup: Int?,
    @Json(name = "lab_group") val labGroup: Int?,
    @Json(name = "field_mask_mapping") val fieldMaskMapping: List<String>?
)